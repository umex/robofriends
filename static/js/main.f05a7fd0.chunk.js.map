{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowy","border","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","console","log","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f05a7fd0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n//lahko bi ze tuki destructuring naredu\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    //lahko bi uporabljal tud props.name\r\n    return(\r\n        //to spodi je JSX\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2> \r\n                <p>{email}</p>\r\n            </div>        \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    /*\r\n    if (true){\r\n        throw new Error('Noooo');\r\n    }\r\n    */\r\n    const cardArray  = robots.map((user,i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return(\r\n        <div className = 'p2'>\r\n            <input \r\n            className = 'pa3 ba b-green bg-lightest-blue'\r\n            type = 'search' \r\n            placeholder = 'search robots'\r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        // 2x{{}} zato ker prvi je za javascrip drugi pa potem za objekt\r\n        <div style={{ overflowy: 'scroll', border: '5px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\nimport {connect} from 'react-redux';\n//import logo from './logo.svg';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n//import {robots} from './robots'\nimport {setSearchField, requestRobots} from '../actions';\n\n//mapStateToProps, mapDispatchToProps\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    //onRequestRobots: () => requestRobots(dispatch)\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n  \n}\n\nclass App extends React.Component {\n  //tega ne rabimo vec, ker nimamo vec stateov. robote bomo dobil iz propov -> onRequestRobots()\n  /*\n  constructor(){\n    super();\n    this.state = {\n      robots: []\n    }\n    console.log('constructor');\n  }\n  */\n  componentDidMount(){\n    this.props.onRequestRobots();\n    console.log('componentDidMount');\n  }\n\n  render() {\n    //zarad tega ni treba zdej ppovsod pisat this.state.searchfield.toLowerCase()\n\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    console.log('render');\n    if (isPending){\n      return <h1>Loading</h1>\n    }else{\n      return(\n        <div className='tc'>\n          <h1 className='f1'>Robofriends</h1>  \n          <SearchBox searchChange = {onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots = {filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n        );\n    }\n  }\n}\n\n\n\n\n//ta del je iz avtomaske generacije kode\n//component ma ppravilo da mora vsaj nekaj zrenderirat\n/*\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n*/\n\n\n\n//tako je novejse ampak smo spremenili ker je tutorial zadaj po verzijah reacta\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots= () => (dispatch)=> {\r\n\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n/*\r\nexport const setSearchField = (text) => {\r\n    console.log(text);\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n*/","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\n// {} -> pomeni empty object\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n            //to je kao isto\r\n            //return {...state, searchField:action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots =  (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\n\nconst logger = createLogger();\n\nconst rootReducer =  combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n    //provider je del reduxa\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}